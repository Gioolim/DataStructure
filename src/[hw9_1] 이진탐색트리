/*
 * 파일명: MyBinarySearchTree.java
 * 작성일: 2018.11.21
 * 작성자: 진영
 * 설명: int형 키값을 저장하는 이진탐색트리를 생성하고 연산을 수행하는 프로그램
 */
package hw9_1;

import java.util.NoSuchElementException;

public class MyBinarySearchTree {
	// (1) 트리의 노드를 표현하는 private 클래스 Node - 필드(int형 key, leftChild, rightChild),
	// 생성자(key값을 매개변수로 받아 초기화)
	private class Node {
		int key;
		Node leftChild;
		Node rightChild;

		public Node(int key) {
			this.key = key;
		}
	}

	// (2) private 인스턴스 변수 트리의 루트 노드를 가킬 변수(root)를 선언하고 null로 초기화
	private Node root = null;

	// 트리에 키값 key를 삽입하는 메소드
	public void insert(int key) {
		root = insertKey(root, key);
	}

	// p를 루트로 하는 트리에 키값 key를 삽입하고, 삽입 후 루트를 리턴하는 메소드(재귀 알고리즘)
	private Node insertKey(Node p, int key) {
		if (p == null) {
			Node newNode = new Node(key);
			return newNode;
		} else if (key < p.key) {
			p.leftChild = insertKey(p.leftChild, key);
			return p; // 루트 불변
		} else if (key > p.key) {
			p.rightChild = insertKey(p.rightChild, key);
			return p; // 루트 불변
		} else { // key = p.key 인 경우 삽입 실패
			System.out.println("삽입 실패. 중복된 키값이 존재합니다: " + key);
			return p; // 루트 불변
		}
	}

	// 트리를 중위순회하며 출력하는 메소드
	public void printInorder() {
		inorder(root);
		System.out.println();
	}

	// (3) p를 루트로 하는 트리를 중위 순회하며 키값을 출력하는 메소드(재귀 알고리즘)
	private void inorder(Node p) {
		if (p != null) {
			inorder(p.leftChild);
			System.out.print(p.key + " ");
			inorder(p.rightChild);
		}
	}

	// (4) 트리의 최대 키값을 리턴하는 메소드(반복 알고리즘) - 공백 트리인 경우 NoSuchElementException 예외 발생
	public int max() {
		if (root == null) {
			throw new NoSuchElementException();
		}
		Node m = root;
		while (m != null) {
			if (m.rightChild == null)
				return m.key;
			m = m.rightChild;
		}
		return m.key;
	}

	// 트리가 키값 key를 포함하는지 여부를 리턴하는 메소드
	public boolean contains(int key) {
		return search(root, key);
	}

	// (5) p를 루트로 하는 트리에 키값 key가 존재하는지 여부를 리턴하는 메소드(재귀 알고리즘)
	private boolean search(Node p, int key) {
		if (p == null)
			return false;
		else {
			if (p.key == key)
				return true;
			else if (p.key < key)
				return search(p.rightChild, key);
			else if (p.key > key)
				return search(p.leftChild, key);
			else
				return false;
		}
	}

	// (6) 트리에 키값 key를 삽입하는 메소드(반복 알고리즘) - 삽입 성공여부(true/false)를 리턴
	public boolean add(int key) {
		Node p = root;
		Node q = null;
		if (p == null) {
			Node newNode = new Node(key);
			root = newNode;
			return true;
		}
		while (p!=null) {
			if (p.key == key)
				return false;
			q = p;
			if (p.key < key)
				p = p.rightChild;
			else
				p = p.leftChild;
		}
		Node newNode2 = new Node(key);
		newNode2.leftChild = null;
		newNode2.rightChild = null;
		if (key < q.key)
			q.leftChild = newNode2;
		else
			q.rightChild = newNode2;
		return true;
	}

	// 키값 key를 트리에서 삭제하는 메소드
	public boolean remove(int key) {
		return removeKey(root, key); 
	}

	private boolean removeKey(Node p, int key) { 
		Node parent = root;
		// 먼저 입력받은 값이 있는지, 있다면 어디에 있는지를 찾는다.
		if(p == null) 
			return false;

		while (p != null) {
			if (p.key == key)
				break;
			else if (p.key < key) {
				parent = p;
				p = p.rightChild;
			}
			else {
				parent = p;
				p = p.leftChild;
			}
		}
		if(p == null)
			return false; // 입력받은 값이 트리에 없는 경우 삭제 실패
		System.out.println(p.key);
		System.out.println(parent.key);
		// 자식이 없을 때. 즉 단말노드일 때
		if(p.leftChild == null && p.rightChild == null) {
			if(p == parent.leftChild) {
				parent.leftChild = null;
			}
			else if(p == parent)
				root = null;
			else {
				parent.rightChild = null;
			}
		}
		// 자식이 하나일 때
		else if(p.leftChild == null || p.rightChild == null) {
			// 삭제할 위치의 p가 왼쪽 자식만 갖는 경우
			if(parent.leftChild != null) {
				if(p == parent.leftChild) 
					parent.leftChild = p.leftChild;
				else 
					parent.rightChild = p.rightChild;
			}
			// 삭제할 위치의 p가 오른쪽 자식만 갖는 경우
			else {
				if(p == parent.leftChild) 
					parent.leftChild = p.rightChild;
				else 
					parent.rightChild = p.rightChild;
			}
		}
		// 후계자 선택
		else {
			Node m1 = p.leftChild; // 왼쪽 서브트리의 최댓값을 가리킬 노드 m1 선언
			Node m2 = m1; // m1을 지울 위치를 가리킬 노드 m2 선언
			while (m1.rightChild != null) {
				m2 = m1;
				m1 = m1.rightChild;
			}
			p.key = m1.key;
			if (m1 == m2) 
				p.leftChild = m1.leftChild;
			if (m1.leftChild == null)
				m2.rightChild = null;	
			else
				m2.rightChild = m1.leftChild;
		}
		return true;
	}
}
