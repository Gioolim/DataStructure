/*
 * 파일명: UndirectedListGraph.java
 * 작성일: 2018.11.22
 * 작성자: 진영
 * 설명: 무방향 그래프를 생성하고 이용하는 프로그램
        adjacency list를 이용한 undirected graph 구현을 연습
 */
package lab10_2;

public class UndirectedListGraph {
	// 연결리스트에 필요한 Node class 생성
	private class Node {
		int vertex;
		Node link;
		Node(int vertex) {
			this.vertex = vertex;
		}
	}

	//private 인스턴스 변수 : 구현에 필요한 변수들을 선언
	private Node[] list;
	private int n; // 혹여 정점이 삭제될 경우에 대비, 정점의 수를 받을 정수 n 선언

	// 생성자
	public UndirectedListGraph(int n) {
		list = new Node[n];
		this.n = n;
	}

	// hasEdge : 간선을 이루는 두개의 정점 v1, v2를 매개변수로 받아 이 간선 존재 여부를 리턴
	public boolean hasEdge(int v1, int v2) {
		Node temp = list[v1];
		while(temp!=null) {
			if(temp.vertex == v2)
				return true;
			temp = temp.link;
		}
/*		temp = list[v2];
		while(temp!=null) {
			if(temp.vertex == v1)
				return true;
			temp = temp.link;
		}*/
		return false;
	}

	// addEdge : 간선을 이루는 두개의 정점 v1, v2를 매개변수로 받아 그래프에 간선을 추가
	public void addEdge(int v1, int v2) {
		if(isValid(v1,v2))
			System.out.printf("간선 삽입 오류 - 잘못된 정점 번호입니다. (%d, %d)\n",v1, v2);
		else {
			if(hasEdge(v1, v2))
				System.out.printf("간선 삽입 오류 - 이미 존재하는 간선입니다. (%d, %d)\n",v1, v2);
			else {
				// list[v1]이 가리키는 연결 리스트 맨 앞에 v2 삽입
				Node add1 = new Node(v2);
				add1.link = list[v1];
				list[v1] = add1;
				// list[v2]이 가리키는 연결 리스트 맨 앞에 v1 삽입
				Node add2 = new Node(v1);
				add2.link = list[v2];
				list[v2] = add2;
			}
		}
	}
	/*
실수 if(!isValid~~
else if(hasEdge~~)
else
	이렇게 하면 isValid 검사를 하고 빠져버리기 때문에 안 됨!
	 */

	public boolean isValid(int v1, int v2) {
		if(v1<0 || v1>=n || v2<0 || v2>=n || v1==v2)
			return true;
		else
			return false;
	}

	public void printAdjacentVertices(int v) {
		Node temp = list[v];
		while(temp!=null) {
			System.out.printf("%d ",temp.vertex);
			temp = temp.link;
		}
		System.out.println();
	}
}

/*
adjacency list로 무방향 그래프를 구현하는 클래스임

private 인스턴스 변수:
   구현에 필요한 변수들을 선언

public 메소드:
   생성자 : 정점수 n을 매개변수로 받아 정점은 n개이고 간선은 없는 초기 그래프를 생성
            이 때, 정점수 n의 크기를 제한하면 안됨(예를 들어 n이 100 이하만 작동하게 하면 안됨)
   hasEdge : 간선을 이루는 두개의 정점 v1, v2를 매개변수로 받아 이 간선 존재 여부를 리턴
   addEdge : 간선을 이루는 두개의 정점 v1, v2를 매개변수로 받아 그래프에 간선을 추가
 ** 무방향 그래프이므로 두 개의 리스트에 노드를 삽입해야 함
 ** 잘못된 정점 번호인 경우 삽입하지 않고 오류 메시지 출력
 ** 이미 존재하는 간선인 경우(hasEdge 호출) 삽입하지 않고 오류 메시지 출력    
   printAdjacentVertices : 정점을 매개변수로 받아 그 정점에 인접한 정점들을 모두 출력
 잘못된 정점 번호인 경우 오류 메시지 출력
 */
